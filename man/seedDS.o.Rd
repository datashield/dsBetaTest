% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/seedDS.o.R
\name{seedDS.o}
\alias{seedDS.o}
\title{Generates a seed number}
\usage{
seedDS.o(x = NULL)
}
\arguments{
\item{x}{the name of a numeric vector, the x-variable.}
}
\value{
the seed number is assigned to the serverside.
}
\description{
This function generates the seed number based on the input vector.
}
\details{
The function aims to define a fixed random number generator based on the input vector
that will be used for the generation of normally distributed noise that is used mainly in the 
probabilistic approach of generating non-disclosive graphs in DataSHIELD (see for example the
ds.scatterPlot function). The recurrent use of a probabilistic anonymisation technique on a 
given dataset can reveal inference of the true records if the random number that generates the
embedded noise is different each time it is run. Therefore, to block potential inferential
disclosure from a malicious attacker, we fix the random number generator in a value that is
specified by the input variable. To find this number we first remove from the input variable any
missing and zero values. Then we take all unique values and check that their length is more 
than a specific percentage of the length of the initial vector. This percentage is specified
by the protection filter 'nfilter.levels' set in Opals. If the length of the unique values after
suppression of missing and zeros is less than the specified percentage of the initial length,
then the function does not generate the seed number and returns an error message to the client.
If the length of the unique values is bigger than the required length then the function
multiplies each element of the vector of unique values by 0.1234 (arbitrary choice), to prevent
the case of having only integer values and then calculates the logaritms to prevent the case of
having very small numbers ($x_i<<1$). Then the function finds the 10%, 17%, 24%, 31%, 38%, 45%,
52%, 59%, 66%, 73%, 80% and 87% quantiles and estimates their module if divided by 0.25. 
Finally, it takes the first three decimals of each value and their sum is the seed number which
is assigned at each study.
}
\author{
Demetris Avraam for DataSHIELD Development Team
}
